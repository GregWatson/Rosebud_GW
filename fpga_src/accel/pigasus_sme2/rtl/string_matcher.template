`include "struct_s.sv"
module string_matcher (
    clk,
    rst,
    in_data,
    in_valid,
    init,
    in_last,
    in_strb,
    in_ready,
    out_data,
    out_valid,
    out_almost_full,
    out_last
);

input clk;
input rst;
input [255:0] in_data;
input in_valid;
input init;
input in_last;
input [15:0] in_strb;
output logic in_ready;
output logic [127:0] out_data;
output logic out_valid;
output logic out_last;
input out_almost_full;

logic [255:0] in_data_r1;
logic [255:0] in_data_r2;
logic         in_valid_r1;
logic         in_valid_r2;
logic         init_r1;
logic         init_r2;
logic         in_last_r1;
logic         in_last_r2;
logic [15:0]  in_strb_r1;
logic [15:0]  in_strb_r2;

{% for i in range(0,context['bucket_size'])%}
{% for j in range(0,context['byte_size'])%}
logic [RID_WIDTH-1:0] hash_out_{{i}}_{{j}};
logic hash_out_valid_filter_{{i}}_{{j}};
rule_s_t din_{{i}}_{{j}};
rule_s_t din_{{i}}_{{j}}_r1;
rule_s_t din_{{i}}_{{j}}_r2;
logic din_valid_{{i}}_{{j}};
logic din_valid_{{i}}_{{j}}_r1;
logic din_valid_{{i}}_{{j}}_r2;
logic din_almost_full_{{i}}_{{j}};
{% endfor %}

{% for j in range(context['byte_size'],32)%}
rule_s_t din_{{i}}_{{j}}_r2;
logic din_valid_{{i}}_{{j}}_r2 = 1'b0;
logic din_almost_full_{{i}}_{{j}};
assign din_{{i}}_{{j}}_r2.data   = 0;
assign din_{{i}}_{{j}}_r2.last   = 1'b0;
assign din_{{i}}_{{j}}_r2.bucket = {{i}};
{% endfor %}

{% endfor %}

logic out_new_pkt;

logic [255:0] in_convt;

{% for j in range(0,context['byte_size'])%}
assign in_convt[7+{{j}}*8:0+{{j}}*8] = in_data[255-{{j}}*8:255-7-{{j}}*8];
{% endfor %}

always @ (posedge clk) begin
    in_ready <= {% for i in range(0,context['bucket_size'])%} {% for j in range(0,context['byte_size'])%} !din_almost_full_{{i}}_{{j}} & {% endfor %} {% endfor %} 1;
    
    in_data_r1 <= in_convt;
    in_data_r2 <= in_data_r1;

    //only valid when the input is dequeued. 
    in_valid_r1 <= in_valid;
    in_valid_r2 <= in_valid_r1;
    init_r1 <= init;
    init_r2 <= init_r1;
    in_last_r1 <= in_last;
    in_last_r2 <= in_last_r1;
    in_strb_r1 <= in_strb;
    in_strb_r2 <= in_strb_r1;
end

always@(posedge clk)begin
{% for i in range(0,context['bucket_size'])%}
{% for j in range(0,context['byte_size'])%}
    din_valid_{{i}}_{{j}} <= out_new_pkt | hash_out_valid_filter_{{i}}_{{j}};
    din_valid_{{i}}_{{j}}_r1 <= din_valid_{{i}}_{{j}};
    din_valid_{{i}}_{{j}}_r2 <= din_valid_{{i}}_{{j}}_r1;

    din_{{i}}_{{j}}.data <= hash_out_valid_filter_{{i}}_{{j}} ? hash_out_{{i}}_{{j}} : 0;
    din_{{i}}_{{j}}.last <= out_new_pkt;
    {% if i == 0 %}
    din_{{i}}_{{j}}.bucket <= 0;
    {% elif i==1 %}
    din_{{i}}_{{j}}.bucket <= 1;
    {% elif i==2 %}
    din_{{i}}_{{j}}.bucket <= 2;
    {% elif i==3 %}
    din_{{i}}_{{j}}.bucket <= 3;
    {% elif i==4 %}
    din_{{i}}_{{j}}.bucket <= 4;
    {% elif i==5 %}
    din_{{i}}_{{j}}.bucket <= 5;
    {% elif i==6 %}
    din_{{i}}_{{j}}.bucket <= 6;
    {% elif i==7 %}
    din_{{i}}_{{j}}.bucket <= 7;
    {% endif %}


    din_{{i}}_{{j}}_r1 <= din_{{i}}_{{j}};
    din_{{i}}_{{j}}_r2 <= din_{{i}}_{{j}}_r1;
{% endfor %}
{% endfor %}
end

//Instantiation
frontend front(
    .clk(clk),
    .rst(rst),
{% for i in range(0,context['bucket_size'])%}
{% for j in range(0,context['byte_size'])%}
    .hash_out_{{i}}_{{j}}(hash_out_{{i}}_{{j}}),
    .hash_out_valid_filter_{{i}}_{{j}}(hash_out_valid_filter_{{i}}_{{j}}),
{% endfor %}
{% endfor %}
    .in_data(in_data_r2),
    .in_valid(in_valid_r2),
    .init(init_r2),
    .in_last(in_last_r2),
    .in_strb(in_strb_r2),
    .out_new_pkt(out_new_pkt)
);

//RuleID reduction logic
backend back(
    .clk(clk),
    .rst(rst),
{% for i in range(0,context['bucket_size']) %}
{% for j in range(0,32) %}
    .din_{{i}}_{{j}}(din_{{i}}_{{j}}_r2),
    .din_valid_{{i}}_{{j}}(din_valid_{{i}}_{{j}}_r2),
    .din_almost_full_{{i}}_{{j}}(din_almost_full_{{i}}_{{j}}),
{% endfor %}
{% endfor %}
    .ruleID(out_data),
    .ruleID_valid(out_valid),
    .ruleID_last(out_last),
    .ruleID_almost_full(out_almost_full)
);

endmodule //top
