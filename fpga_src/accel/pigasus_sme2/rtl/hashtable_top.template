`include "struct_s.sv"
module hashtable_top(clk,
{% for i in range(0,context['bucket_size'])%}
{% for j in range(0,context['byte_size'])%}
	dout_{{i}}_{{j}},dout_valid_{{i}}_{{j}},
{% endfor %}
{% endfor %}
    din,din_valid
);

input clk;
input [255:0] din;
input din_valid;
{% for i in range(0,context['bucket_size'])%}
{% for j in range(0,context['byte_size'])%}
output wire [RID_WIDTH-1:0] dout_{{i}}_{{j}};
output wire dout_valid_{{i}}_{{j}};
{% endfor %}
{% endfor %}

{% for i in range(0,context['bucket_size'])%}
{% for j in range(0,context['byte_size'])%}
wire [63:0] din_{{i}}_{{j}};
wire din_valid_{{i}}_{{j}};
{% endfor %}
{% endfor %}

reg [63:0] din_reg;
reg din_valid_reg;

{% for i in range(0,context['bucket_size'])%}
{% for j in range(0,7)%}
assign din_{{i}}_{{j}} = {din[{{(j+1)*8-1}}:0],din_reg[63:{{(j+1)*8}}]};
{% endfor %}

{% for j in range(7,context['byte_size'])%}
assign din_{{i}}_{{j}} = din[{{(j+1)*8-1}}:{{((j+1)*8-64)}}];
{% endfor %}
{% endfor %}

//Valid signals
{% for j in range(0,7)%}
assign din_valid_0_{{j}} = din_valid & din_valid_reg;
assign din_valid_1_{{j}} = din_valid & din_valid_reg;
{% endfor %}
{% for j in range(7,context['byte_size'])%}
assign din_valid_0_{{j}} = din_valid;
assign din_valid_1_{{j}} = din_valid;
{% endfor %}

{% for j in range(0,6)%}
assign din_valid_2_{{j}} = din_valid & din_valid_reg;
{% endfor %}
{% for j in range(6,context['byte_size'])%}
assign din_valid_2_{{j}} = din_valid;
{% endfor %}

{% for j in range(0,5)%}
assign din_valid_3_{{j}} = din_valid & din_valid_reg;
{% endfor %}
{% for j in range(5,context['byte_size'])%}
assign din_valid_3_{{j}} = din_valid;
{% endfor %}

{% for j in range(0,4)%}
assign din_valid_4_{{j}} = din_valid & din_valid_reg;
{% endfor %}
{% for j in range(4,context['byte_size'])%}
assign din_valid_4_{{j}} = din_valid;
{% endfor %}

{% for j in range(0,3)%}
assign din_valid_5_{{j}} = din_valid & din_valid_reg;
{% endfor %}
{% for j in range(3,context['byte_size'])%}
assign din_valid_5_{{j}} = din_valid;
{% endfor %}

{% for j in range(0,2)%}
assign din_valid_6_{{j}} = din_valid & din_valid_reg;
{% endfor %}
{% for j in range(2,context['byte_size'])%}
assign din_valid_6_{{j}} = din_valid;
{% endfor %}

{% for j in range(0,1)%}
assign din_valid_7_{{j}} = din_valid & din_valid_reg;
{% endfor %}
{% for j in range(1,context['byte_size'])%}
assign din_valid_7_{{j}} = din_valid;
{% endfor %}


always @ (posedge clk) begin
    //din_reg <= din[127:64];
    din_reg <= din[255:192];
    din_valid_reg <= din_valid;
end

{% for i in range(0,context['bucket_size'])%}
{% for j in range(0,context['half_byte_size'])%}

hashtable #(
	.ANDMSK({{context['andmsk'][i]}}),
	.NBITS({{context['nbits'][i]}}),
	.DWIDTH(RID_WIDTH),
	.MEM_SIZE({{context['bm_size'][i]}}),
	.INIT_FILE("./memory_init/bitmap{{i}}.mif")
)
hashtable_{{i}}_{{j}} (
	.clk (clk),
	.din0 (din_{{i}}_{{2*j}}),
	.din0_valid (din_valid_{{i}}_{{2*j}}),
	.din1 (din_{{i}}_{{2*j+1}}),
	.din1_valid (din_valid_{{i}}_{{2*j+1}}),
	.dout0 (dout_{{i}}_{{2*j}}),
	.dout0_valid (dout_valid_{{i}}_{{2*j}}),
	.dout1 (dout_{{i}}_{{2*j+1}}),
	.dout1_valid (dout_valid_{{i}}_{{2*j+1}})
);
{% endfor %}
{% endfor %}

endmodule
