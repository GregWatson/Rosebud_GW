// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1.1 (64-bit)
// Version: 2021.1.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="hdr_parser_hdr_parser,hls_ip_2021_1_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xqvu9p-flqa2104-2L-e,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=2.295000,HLS_SYN_LAT=1,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=163,HLS_SYN_LUT=218,HLS_VERSION=2021_1_1}" *)

module hdr_parser (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        info_ap_vld,
        info,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   info_ap_vld;
input  [159:0] info;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
reg   [159:0] info_preg;
reg    info_ap_vld_preg;
reg    info_blk_n;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
wire   [7:0] info_state_fu_130_p4;
wire   [15:0] info_cur_ts_fu_110_p4;
wire   [15:0] info_old_ts_fu_80_p4;
wire   [16:0] zext_ln20_fu_146_p1;
wire   [16:0] zext_ln20_1_fu_150_p1;
wire   [16:0] sub_ln21_fu_160_p2;
wire   [0:0] icmp_ln20_fu_154_p2;
wire   [0:0] icmp_ln21_fu_166_p2;
wire   [15:0] info_cur_tag_fu_100_p4;
wire   [15:0] info_old_tag_fu_76_p1;
wire   [31:0] info_cur_seq_fu_120_p4;
wire   [31:0] info_exp_seq_fu_90_p4;
wire   [31:0] add_ln30_fu_190_p2;
wire   [0:0] icmp_ln30_fu_196_p2;
wire   [0:0] icmp_ln31_fu_202_p2;
wire   [0:0] icmp_ln17_fu_140_p2;
wire   [0:0] or_ln20_fu_172_p2;
wire   [0:0] xor_ln17_fu_214_p2;
wire   [0:0] and_ln20_fu_220_p2;
wire   [0:0] or_ln20_1_fu_226_p2;
wire   [0:0] or_ln30_fu_208_p2;
wire   [0:0] or_ln20_3_fu_236_p2;
wire   [2:0] zext_ln20_2_fu_232_p1;
wire   [0:0] or_ln20_2_fu_250_p2;
wire   [0:0] icmp_ln25_fu_178_p2;
wire   [0:0] or_ln25_fu_256_p2;
wire   [2:0] select_ln20_fu_242_p3;
wire   [0:0] icmp_ln28_fu_184_p2;
wire   [0:0] xor_ln20_fu_270_p2;
wire   [0:0] and_ln28_fu_276_p2;
wire   [0:0] and_ln28_1_fu_282_p2;
wire   [2:0] select_ln25_fu_262_p3;
wire   [2:0] select_ln28_fu_288_p3;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 info_preg = 160'd0;
#0 info_ap_vld_preg = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        info_ap_vld_preg <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (info_ap_vld == 1'b1))) begin
            info_ap_vld_preg <= info_ap_vld;
        end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            info_ap_vld_preg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        info_preg <= 160'd0;
    end else begin
        if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (info_ap_vld == 1'b1))) begin
            info_preg <= info;
        end
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        info_blk_n = 1'b0;
    end else begin
        info_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln30_fu_190_p2 = (info_exp_seq_fu_90_p4 + 32'd30000);

assign and_ln20_fu_220_p2 = (xor_ln17_fu_214_p2 & or_ln20_fu_172_p2);

assign and_ln28_1_fu_282_p2 = (icmp_ln25_fu_178_p2 & and_ln28_fu_276_p2);

assign and_ln28_fu_276_p2 = (xor_ln20_fu_270_p2 & icmp_ln28_fu_184_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((info_ap_vld_preg == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((info_ap_vld_preg == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (info_ap_vld_preg == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = select_ln28_fu_288_p3;

assign icmp_ln17_fu_140_p2 = ((info_state_fu_130_p4 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_154_p2 = ((info_cur_ts_fu_110_p4 < info_old_ts_fu_80_p4) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_166_p2 = (($signed(sub_ln21_fu_160_p2) > $signed(17'd4)) ? 1'b1 : 1'b0);

assign icmp_ln25_fu_178_p2 = ((info_cur_tag_fu_100_p4 == info_old_tag_fu_76_p1) ? 1'b1 : 1'b0);

assign icmp_ln28_fu_184_p2 = ((info_cur_seq_fu_120_p4 == info_exp_seq_fu_90_p4) ? 1'b1 : 1'b0);

assign icmp_ln30_fu_196_p2 = ((info_cur_seq_fu_120_p4 > add_ln30_fu_190_p2) ? 1'b1 : 1'b0);

assign icmp_ln31_fu_202_p2 = ((info_cur_seq_fu_120_p4 < info_exp_seq_fu_90_p4) ? 1'b1 : 1'b0);

assign info_cur_seq_fu_120_p4 = {{info_preg[127:96]}};

assign info_cur_tag_fu_100_p4 = {{info_preg[79:64]}};

assign info_cur_ts_fu_110_p4 = {{info_preg[95:80]}};

assign info_exp_seq_fu_90_p4 = {{info_preg[63:32]}};

assign info_old_tag_fu_76_p1 = info_preg[15:0];

assign info_old_ts_fu_80_p4 = {{info_preg[31:16]}};

assign info_state_fu_130_p4 = {{info_preg[135:128]}};

assign or_ln20_1_fu_226_p2 = (icmp_ln17_fu_140_p2 | and_ln20_fu_220_p2);

assign or_ln20_2_fu_250_p2 = (or_ln20_fu_172_p2 | icmp_ln17_fu_140_p2);

assign or_ln20_3_fu_236_p2 = (or_ln30_fu_208_p2 | or_ln20_1_fu_226_p2);

assign or_ln20_fu_172_p2 = (icmp_ln21_fu_166_p2 | icmp_ln20_fu_154_p2);

assign or_ln25_fu_256_p2 = (or_ln20_2_fu_250_p2 | icmp_ln25_fu_178_p2);

assign or_ln30_fu_208_p2 = (icmp_ln31_fu_202_p2 | icmp_ln30_fu_196_p2);

assign select_ln20_fu_242_p3 = ((or_ln20_3_fu_236_p2[0:0] == 1'b1) ? zext_ln20_2_fu_232_p1 : 3'd4);

assign select_ln25_fu_262_p3 = ((or_ln25_fu_256_p2[0:0] == 1'b1) ? select_ln20_fu_242_p3 : 3'd2);

assign select_ln28_fu_288_p3 = ((and_ln28_1_fu_282_p2[0:0] == 1'b1) ? 3'd3 : select_ln25_fu_262_p3);

assign sub_ln21_fu_160_p2 = (zext_ln20_fu_146_p1 - zext_ln20_1_fu_150_p1);

assign xor_ln17_fu_214_p2 = (icmp_ln17_fu_140_p2 ^ 1'd1);

assign xor_ln20_fu_270_p2 = (or_ln20_2_fu_250_p2 ^ 1'd1);

assign zext_ln20_1_fu_150_p1 = info_old_ts_fu_80_p4;

assign zext_ln20_2_fu_232_p1 = or_ln20_1_fu_226_p2;

assign zext_ln20_fu_146_p1 = info_cur_ts_fu_110_p4;

endmodule //hdr_parser
