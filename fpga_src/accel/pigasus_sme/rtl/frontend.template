`include "struct_s.sv"
module frontend (clk,rst,
{% for i in range(0,context['bucket_size'])%}
{% for j in range(0,context['byte_size'])%}
    hash_out_{{i}}_{{j}},
    hash_out_valid_filter_{{i}}_{{j}},
{% endfor %}
{% endfor %}
    in_data,
    in_valid,
    in_sop,
    in_eop,
    in_empty,
    out_new_pkt
);

input clk;
input rst;
input [255:0] in_data;
input in_valid;
input in_sop;
input in_eop;
input [4:0] in_empty;
{% for i in range(0,context['bucket_size'])%}
{% for j in range(0,context['byte_size'])%}
output wire [RID_WIDTH-1:0] hash_out_{{i}}_{{j}};
output wire hash_out_valid_filter_{{i}}_{{j}};
{% endfor %}
{% endfor %}
output reg out_new_pkt;

//filter
wire ce;
wire [255:0] filter_out;
wire filter_out_valid;

//hashtable_top
{% for i in range(0,context['bucket_size'])%}
{% for j in range(0,context['byte_size'])%}
wire hash_out_valid_{{i}}_{{j}};
{% endfor %}
{% endfor %}
reg [255:0] hash_in;
reg hash_in_valid;

//Other
reg [255:0] din_reg;
reg din_valid_reg;
wire new_pkt;
{% for i in range(1,17)%}
reg [255:0] filter_out_r{{i}};
reg new_pkt_r{{i}};
{% endfor %}

//Hashtable signals
{% for i in range(0,context['bucket_size'])%}
{% for j in range(0,context['byte_size'])%}
assign hash_out_valid_filter_{{i}}_{{j}} = hash_out_valid_{{i}}_{{j}} & !filter_out_r13[{{i+j*8}}];
{% endfor %}
{% endfor %}

assign new_pkt = in_eop & in_valid;

//Make sure all the flits of the pkts have been checked before moving it. 
always @ (posedge clk) begin
    //if(rst) begin
    //    out_new_pkt <= 0;
{% for i in range(1,17)%}
    //    new_pkt_r{{i}} <= 0;
{% endfor %}
    //end else begin
        new_pkt_r1 <= new_pkt;
{% for i in range(1,16)%}
        new_pkt_r{{i+1}} <= new_pkt_r{{i}};
{% endfor %}
        out_new_pkt <= new_pkt_r15;
    //end
end

//consistent with the filter 
always @ (posedge clk) begin
    hash_in <= in_data;
    hash_in_valid <= in_valid;
end


//Comb of filter and hashtable
always @ (posedge clk) begin
    //if(rst) begin
{% for i in range(1,16)%}
    //    filter_out_r{{i}} <= {256{1'b1}};
{% endfor %}
    //end else begin
        if(filter_out_valid) begin
            filter_out_r1 <= filter_out;
        end else begin
            filter_out_r1 <= {256{1'b1}};
        end
{% for i in range(1,14)%}
        filter_out_r{{i+1}} <= filter_out_r{{i}};
{% endfor %}
    //end
end

//Instantiation
first_filter filter_inst(
    .clk(clk),
    .rst(rst),
	  .in_data    (in_data),
    .in_valid   (in_valid),
    .in_sop     (in_sop),
    .in_eop     (in_eop),
    .in_empty   (in_empty),
    .out_data   (filter_out),
    .out_valid  (filter_out_valid)
);

hashtable_top hashtable_top_inst (
	.clk (clk),
{% for i in range(0,context['bucket_size'])%}
{% for j in range(0,context['byte_size'])%}
	.dout_{{i}}_{{j}} (hash_out_{{i}}_{{j}}),
  .dout_valid_{{i}}_{{j}} (hash_out_valid_{{i}}_{{j}}),
{% endfor %}
{% endfor %}
  .din (hash_in),
  .din_valid (hash_in_valid)
);

endmodule //top
